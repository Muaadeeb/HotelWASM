@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"

@inject NavigationManager _navigationManager;
@inject IHotelRoomRepository _hotelRoomRepository;
@inject IHotelImageRepository _hotelImageRepository;
@inject IJSRuntime _jsRunTime;
@inject IFileUpload _fileUpload;

@*@attribute [Authorize]*@
@*@attribute [Authorize(Roles = Common.SD.Role_Admin)]*@

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelRoomDto" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    @*<ValidationSummary></ValidationSummary>*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomDto.Name" class="form-control" />
                        <ValidationMessage For="()=> HotelRoomDto.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomDto.Occupancy" class="form-control" />
                        <ValidationMessage For="()=> HotelRoomDto.Occupancy"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="HotelRoomDto.RegularRate" class="form-control" />
                        <ValidationMessage For="()=> HotelRoomDto.RegularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Sq Ft</label>
                        <InputText @bind-Value="HotelRoomDto.SqFt" class="form-control" />
                    </div>
                    <div class="form-group" style="height: 250px;">
                        <label>Details</label>
                        @*<InputTextArea @bind-Value="HotelRoomDto.Details" class="form-control" />*@
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room details">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>


                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>

                    <div class="form-group" style="padding-top: 70px;">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (IsImageUploadProcessStarted)
                            {
                                <div class="col-md-12">
                                    <span><i class="fa fa-spin fa-spinner"></i>&nbsp; Please wait... Images are uploading...</span>
                                </div>
                            }

                            @if (HotelRoomDto.ImagesUrls != null && HotelRoomDto.ImagesUrls.Count > 0)
                            {
                                int roomImageNumber = 1;
                                foreach (var roomImage in HotelRoomDto.ImagesUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%;">
                                            <span class="room-image-title">@roomImageNumber</span>
                                        </div>
                                        <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    roomImageNumber++;
                                }
                            }
                        </div>

                    </div>


                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room </button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDTO HotelRoomDto { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";

    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();
    private List<string> DeletedImageNames { get; set; } = new List<string>();

    private bool IsImageUploadProcessStarted { get; set; } = false;

    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }


    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;
        //if (!authenticationState.User.Identity.IsAuthenticated)
        if (!authenticationState.User.IsInRole(Common.StaticDetails.Role_Admin))
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }

        //if (authenticationState.User.IsInRole("Admin"))
        //{

        //}


        if (Id != null)
        {
            Title = "Update";
            HotelRoomDto = await _hotelRoomRepository.GetHotelRoomAsync(Id.Value);

            if (HotelRoomDto?.HotelRoomImages != null)
            {
                HotelRoomDto.ImagesUrls = HotelRoomDto.HotelRoomImages.Select(x => x.RoomImageUrl).ToList();
            }
        }
        else
        {
            Title = "Create";
            HotelRoomDto = new HotelRoomDTO();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(HotelRoomDto.Details))
                {
                    await QuillHtml.LoadHTMLContent(HotelRoomDto.Details);
                }

                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
                await _jsRunTime.ToastrError("Possible issue with loading html text content - worry if you keep seeing this popup.");
            }
        }
    }

    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await _hotelRoomRepository.IsRoomUniqueAsync(HotelRoomDto.Name, HotelRoomDto.Id);

            if (roomDetailsByName != null)
            {
                await _jsRunTime.ToastrError("Room name already exists.");
                return;
            }

            HotelRoomDto.Details = await QuillHtml.GetHTML();
            if (HotelRoomDto.Id != 0 && Title == "Update")
            {
                var updateResult = await _hotelRoomRepository.UpdateHotelRoomAsync(HotelRoomDto, HotelRoomDto.Id);

                if (HotelRoomDto.ImagesUrls != null && HotelRoomDto.ImagesUrls.Any() ||
                    DeletedImageNames != null && DeletedImageNames.Any())
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"{_navigationManager.BaseUri}RoomImages/", "");
                            var result = _fileUpload.DeleteFile(imageName);
                            await _hotelImageRepository.DeleteHotelRoomImageByImageUrlAsync(deletedImageName);
                        }
                    }

                    await AddHotelRoomImage(updateResult);
                }

                await _jsRunTime.ToastrSuccess("Hotel room updated successfully.");
            }
            else
            {
                var createdResult = await _hotelRoomRepository.CreateHotelRoomAsync(HotelRoomDto);
                await AddHotelRoomImage(createdResult);
                await _jsRunTime.ToastrSuccess("Hotel room created successfully.");
            }
        }
        catch (Exception ex)
        {
            // log exception
        }

        _navigationManager.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;

        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await _fileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await _jsRunTime.ToastrError("Please select .jpg/.jpeg/.png files only");
                        return;
                    }
                };

                if (images.Any())
                {
                    if (HotelRoomDto.ImagesUrls != null && HotelRoomDto.ImagesUrls.Any())
                    {
                        HotelRoomDto.ImagesUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomDto.ImagesUrls = new List<string>();
                        HotelRoomDto.ImagesUrls.AddRange(images);
                    }
                }
                else
                {
                    await _jsRunTime.ToastrError("Image uploading failed.");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            await _jsRunTime.ToastrError("Something happened while uploading images." + ex.Message);
            return;
        }
        finally
        {
            IsImageUploadProcessStarted = false;
        }
    }

    private async Task AddHotelRoomImage(HotelRoomDTO roomdetails)
    {
        if (HotelRoomDto.ImagesUrls != null)
        {
            foreach (var imageUrl in HotelRoomDto.ImagesUrls)
            {
                if (HotelRoomDto.HotelRoomImages == null || HotelRoomDto.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
                {
                    RoomImage = new HotelRoomImageDTO()
                    {
                        RoomId = roomdetails.Id,
                        RoomImageUrl = imageUrl
                    };
                    await _hotelImageRepository.CreateHotelRoomImageAsync(RoomImage);
                }
            }
        }
    }

    internal async Task DeletePhoto(string imageUrl)
    {
        var showMessageText = string.Empty;
        try
        {
            var imageIndex = HotelRoomDto.ImagesUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{_navigationManager.BaseUri}RoomImages/", "");

            if (HotelRoomDto.Id == 0 && Title == "Create")
            {
                var result = _fileUpload.DeleteFile(imageName);
            }
            else
            {
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }

            HotelRoomDto.ImagesUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            await _jsRunTime.ToastrError(ex.Message);
        }
    }
}
