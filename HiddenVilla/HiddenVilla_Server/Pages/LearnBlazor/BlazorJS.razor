@page "/blazorjs"

@inject IJSRuntime _jsRunTime;

<h3>BlazorJS</h3>

<div class="row">
    <button class="btn btn-secondary" @onclick="(()=> TestConfirmBox(ConfirmMessage))">Test Confirm Box</button>
</div>
<br />
<br />
<div class="row mt-4">
    <button class="btn btn-success" @onclick="TestSuccess">Test Toastr Success</button>
    <button class="btn btn-danger" @onclick="TestFailure">Test Toastr Failure</button>
</div>
<div class="row mt-4">
    <button class="btn btn-success" @onclick="TestSuccessSwal">Test Swal Success</button>
    <button class="btn btn-danger" @onclick="TestFailureSwal">Test Swal Failure</button>
</div>
<br />

<div class="row">
    @if (ConfirmResult)
    {
        <p>Confirmation has been made!</p>
    }
    else
    {
        <p>
            Confirmation Pending
        </p>
    }
</div>

@code {

    private string ConfirmMessage = "Are you sure you want to click?";
    private bool ConfirmResult { get; set; }

    private async Task TestConfirmBox(string message)
    {
        ConfirmResult = await _jsRunTime.InvokeAsync<bool>("confirm", message);
    }

    private async Task TestSuccess()
    {
        await _jsRunTime.ToastrSuccess("Success Message");
    }

    private async Task TestFailure()
    {
        await _jsRunTime.ToastrError("Error Message");
    }

    private async Task TestSuccessSwal()
    {
        await _jsRunTime.InvokeVoidAsync("ShowSwal", "success", "Task completed successfully!");
    }

    private async Task TestFailureSwal()
    {
        await _jsRunTime.InvokeVoidAsync("ShowSwal", "error", "Task failed!");
    }


}
